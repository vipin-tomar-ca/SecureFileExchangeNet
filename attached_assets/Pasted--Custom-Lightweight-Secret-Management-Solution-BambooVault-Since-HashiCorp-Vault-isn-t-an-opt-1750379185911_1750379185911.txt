## Custom Lightweight Secret Management Solution ("BambooVault")

Since HashiCorp Vault isn't an option and we need to build our own solution, here's a complete specification for a secure, lightweight secret manager integrated with Atlassian Bamboo CI/CD.

---

### **BambooVault Architecture**
```mermaid
graph TD
    A[Bamboo Server] -->|API Calls| B[Secret Manager Service]
    C[.NET Workers] -->|HTTPS| B
    B --> D[Encrypted Secrets Database]
    B --> E[Audit Log]
    F[Admin CLI] -->|RBAC| B
    G[HSM/TPM] -->|Key Encryption| D
```

---

### **Core Components**

#### 1. **Secret Manager Service (.NET 8 Minimal API)**
- REST API for secret management
- Runs as a Windows Service/Linux Daemon
- Endpoints:
  - `POST /secrets` - Store secret
  - `GET /secrets/{id}` - Retrieve secret
  - `PUT /secrets/{id}/rotate` - Rotate secret
  - `GET /audit` - View access logs

#### 2. **Secrets Database (Encrypted SQLite)**
```csharp
public class SecretRecord
{
    public Guid Id { get; set; }
    public byte[] EncryptedValue { get; set; } // AES-256-GCM encrypted
    public byte[] IV { get; set; }
    public string Metadata { get; set; } // JSON: creator, rotation policy
    public DateTime CreatedAt { get; set; }
}
```

#### 3. **Key Management**
- Master Encryption Key stored in:
  - Hardware Security Module (HSM)
  - Trusted Platform Module (TPM)
  - Or encrypted file with ACL restrictions
- Key rotation schedule: Quarterly

---

### **Security Specifications**

| **Layer**         | **Implementation**                          |
|-------------------|---------------------------------------------|
| **Authentication**| Client certificates + API keys              |
| **Authorization** | RBAC with fine-grained permissions          |
| **Encryption**    | AES-256-GCM with unique IV per secret       |
| **Auditing**      | Immutable log of all access attempts        |
| **Network**       | Mutual TLS (mTLS) for all communications    |

---

### **Integration with Bamboo CI/CD**

#### 1. **Bamboo Secret Plugin (Java)**
```java
public class BambooVaultTask extends AbstractTask {
    @Argument private String secretId;
    
    @Override
    public TaskResult execute(JobContext context) {
        BambooVaultClient client = new BambooVaultClient();
        String secret = client.getSecret(secretId);
        
        // Inject as masked build variable
        context.getBuildContext().setSecretVariable("SECRET_" + secretId, secret);
        return TaskResult.newSuccess();
    }
}
```

#### 2. **Build Configuration**
```yaml
plan:
  name: SecureFileExchange-Deploy
  variables:
    VAULT_URL: https://vault.internal
    VAULT_CLIENT_CERT: ${bamboo.capability.system.builder.cert}
  tasks:
    - key: 'fetch-secrets'
      type: 'com.bamboo.bamboovault'
      configuration:
        secrets: 
          - id: 'sftp-prod-key'
          - id: 'db-connection'
    
    - script: 
        command: dotnet publish -c Release
        environmentVariables: 
          SFTP_KEY: ${bamboo.SECRET_sftp-prod-key}
```

#### 3. **Deployment Security**
```mermaid
sequenceDiagram
    Bamboo Agent->>Secret Manager: GET /secrets/sftp-prod-key
    Note right of Secret Manager: Verify Bamboo cert
    Secret Manager-->>Bamboo Agent: Encrypted secret
    Bamboo Agent->>Deployment Target: Push artifacts (with secrets)
    Deployment Target->>Secret Manager: Direct secret retrieval
```

---

### **.NET Client Library**

```csharp
// BambooVault.Client NuGet package
public class SecretClient
{
    private readonly HttpClient _client;
    
    public SecretClient(X509Certificate2 clientCert)
    {
        var handler = new HttpClientHandler();
        handler.ClientCertificates.Add(clientCert);
        _client = new HttpClient(handler);
    }

    public async Task<string> GetSecretAsync(string secretId)
    {
        var response = await _client.GetAsync($"{BaseUrl}/secrets/{secretId}");
        return await response.Content.ReadAsStringAsync();
    }
}

// Worker Service Integration
builder.Services.AddSecretClient(config =>
{
    config.BaseUrl = "https://vault.internal";
    config.ClientCertificate = LoadVaultCertificate();
});
```

---

### **Deployment Architecture**

```
Physical Security Zone
│
├── Secure Server (DMZ)
│   ├── Secret Manager Service
│   ├── Hardware Security Module
│   └── Audit Log Shipper
│
├── Bamboo CI/CD Servers
│   ├── BambooVault Plugin
│   └── Client Certificates
│
└── Application Servers
    ├── .NET Workers
    └── Client Certificates
```

---

### **Certificate Management**

1. **Internal PKI Setup**
```bash
# Create Root CA
openssl req -x509 -sha256 -days 3650 -newkey rsa:4096 \
  -keyout ca.key -out ca.crt -subj "/CN=BambooVault CA"

# Create Bamboo Server Cert
openssl req -newkey rsa:2048 -nodes -keyout bamboo.key \
  -out bamboo.csr -subj "/CN=bamboo-build-01"
openssl x509 -req -CA ca.crt -CAkey ca.key -in bamboo.csr \
  -out bamboo.crt -days 365 -CAcreateserial
```

2. **Certificate Distribution**
- Bamboo Servers: Auto-deploy during provisioning
- Worker Services: Delivered via secure configuration management

---

### **Secret Rotation Workflow**

```mermaid
sequenceDiagram
    Admin->>CLI: vault rotate sftp-prod-key
    CLI->>Secret Manager: POST /rotate/sftp-prod-key
    Secret Manager->>HSM: Decrypt old key
    Secret Manager->>HSM: Encrypt new key
    Secret Manager->>Notification Service: Send rotation alert
    Notification Service->>Bamboo: Trigger redeploy
    Bamboo->>Worker Services: Redeploy with new secrets
```

---

### **Disaster Recovery Plan**

1. **Daily Backups**
```bash
# Encrypted database dump
sqlite3 secrets.db .dump | gpg --encrypt --recipient backup-key > backup.sql.gpg

# Offsite transfer
scp backup.sql.gpg backup-server:/vault-backups/
```

2. **Recovery Procedure
   1. Install clean Secret Manager
   2. Restore database from backup
   3. Import HSM master key
   4. Verify audit log integrity

---

### **Security Audit Features**

1. **Access Log Schema**
```json
{
  "timestamp": "2023-10-05T14:23:18Z",
  "secretId": "sftp-prod-key",
  "clientId": "bamboo-build-12",
  "operation": "read",
  "sourceIp": "10.22.1.45",
  "status": "success",
  "signature": "HMAC-SHA256(....)"
}
```

2. **Compliance Reports**
- Monthly access reviews
- Unused secret identification
- Certificate expiry alerts

---

### **Implementation Roadmap**

| **Phase** | **Duration** | **Deliverables** |
|-----------|--------------|------------------|
| 1. Core Service | 2 weeks | Secret storage/retrieval API, Encryption engine |
| 2. Bamboo Integration | 1 week | Custom task plugin, Certificate management |
| 3. Client Libraries | 1 week | .NET client, Audit tools |
| 4. High Availability | 2 weeks | Active/standby setup, Automated backups |
| 5. Compliance Features | 1 week | RBAC, Audit reports |

---

### **Comparison to Commercial Solutions**

| **Feature**       | **BambooVault** | **HashiCorp Vault** |
|-------------------|-----------------|---------------------|
| Complexity        | Low             | High                |
| Bamboo Integration| Native          | Plugin required     |
| .NET Support      | First-class     | Generic             |
| Hardware Support  | HSM/TPM         | HSM                 |
| Audit Capabilities| Customizable    | Comprehensive       |
| Maintenance       | Self-managed    | Self-managed        |

This custom solution provides:
1. Tight integration with Bamboo CI/CD
2. Optimized .NET 8 performance
3. Compliance with internal security policies
4. No external dependencies
5. Lower operational complexity than enterprise vaults

Total implementation time: 6-8 weeks with 2 senior developers.