📦 Project Specification: Secure File Exchange Platform (.NET 8)

🧭 Overview

A highly secure and scalable microservice-based file exchange system built in .NET 8. The application facilitates file transfers with multiple third-party vendors via SFTP, performs data validation using gRPC-based services, and alerts discrepancies through email. It complies with modern security standards including encryption at rest and in transit, audit logging, secret management, and observability.


---

🎯 Project Goals

Support multi-vendor file exchange over SFTP

Validate and process files with custom business rules

Communicate discrepancies via email (outbound and inbound)

Ensure compliance and observability with audit logging, encryption, and traceability

Be configurable and debuggable, with pluggable serializers (Protobuf/JSON)



---

📐 Architecture Components

🔁 External Systems:

Third-party SFTP Servers

Third-party Email Clients (issue reports)


🧱 Microservices (All .NET 8)

1. SftpWorkerService – Handles SFTP polling, download, and publishing to RabbitMQ


2. FileProcessorService – Consumes file messages, parses records, calls validation service


3. BusinessRulesService – A gRPC microservice that validates file content with per-vendor rules


4. EmailNotificationService – Sends email reports of internal discrepancies


5. IssueEmailMonitorService – Polls IMAP inbox for vendor emails reporting issues



📚 Shared Libraries

Contracts – Protobuf schemas and DTOs

Common – Encryption, logging, retry logic, pluggable serializers

VendorConfig – Configuration and rules per vendor


📦 Messaging

RabbitMQ with TLS, DLQ, retries


🔒 Security

SFTP with SSH keys, TLS 1.2+

SMTP/IMAP with STARTTLS or 3rd party email API

AES-256 encryption at rest

Mutual TLS for gRPC


📊 Observability

OpenTelemetry for tracing

Serilog for logging (to Seq or ELK)

Health endpoints on all services



---

🔄 Process Flow (E2E)

1. SftpWorkerService pulls files from configured vendor SFTP


2. File metadata is published to file.received queue as FileReceivedMessage


3. FileProcessorService consumes and parses file, then calls BusinessRulesService over gRPC


4. If discrepancies found, EmailNotificationService formats and sends notification


5. Meanwhile, IssueEmailMonitorService listens to mailbox for emails from vendors and publishes ThirdPartyIssueReportedMessage


6. FileIssueProcessorService logs and links external issues to file records




---

📂 Project Structure

SecureFileExchange.sln
│
├── SftpWorkerService (.NET Worker)
├── FileProcessorService (.NET Worker)
├── BusinessRulesService (.NET gRPC Service)
├── EmailNotificationService (.NET Worker)
├── IssueEmailMonitorService (.NET Worker)
│
├── Contracts (Protobuf/DTOs)
├── Common (Utils, Serializers, Retry, Email)
├── VendorConfig (Per-vendor settings)
└── Tests (xUnit/NUnit)


---

🧾 User Stories & Tasks

👤 As a Platform Admin

I want to onboard a new vendor via config file or UI

I want to define validation rules for each vendor

I want to receive alerts when a file fails validation


👤 As a System

I want to download files from each vendor over SFTP securely

I want to validate and route file data to appropriate business rules

I want to notify operations if an issue is found

I want to log and persist all steps for auditing

I want to listen for incoming issue reports via email



---

📋 Tasks (Epic: SFTP Ingestion)

[ ] Create VendorConfig model with path, host, credentials

[ ] Implement SFTP polling using SSH.NET

[ ] Hash and validate downloaded files

[ ] Publish FileReceivedMessage to RabbitMQ

[ ] Log all actions with correlation IDs


📋 Tasks (Epic: File Processing & Validation)

[ ] Consume messages from file.received queue

[ ] Parse file content (CSV/XML/JSON)

[ ] Call gRPC ValidateRecordsRequest

[ ] Handle ValidationResult and log discrepancies


📋 Tasks (Epic: Email Notification)

[ ] Create email templates (HTML + plain text)

[ ] Send discrepancy reports via SMTP/SendGrid

[ ] Use RazorLight for templating (optional)


📋 Tasks (Epic: Issue Email Parsing)

[ ] Connect to IMAP inbox using MailKit

[ ] Parse subject, body and extract file ID and issues

[ ] Publish ThirdPartyIssueReportedMessage


📋 Tasks (Epic: Common & Infrastructure)

[ ] Add IMessageSerializer abstraction

[ ] Implement ProtobufMessageSerializer and JsonMessageSerializer

[ ] Register serializer based on appsettings.json

[ ] Configure OpenTelemetry tracing

[ ] Configure Serilog and health checks



---

🧩 Protobuf Messages

FileReceivedMessage

ValidateRecordsRequest, ValidationResult, Discrepancy

EmailDiscrepancyNotification

ThirdPartyIssueReportedMessage



---

🧷 Attached Resources

✅ ZIP: Solution File & Structure

✅ ZIP: Protobuf, Messages, Diagrams



---

Let me know if you want this turned into a GitHub README, Confluence doc, or full-blown Git repository with CI/CD included.



✅ Done! I’ve compiled the entire detailed project specification into a living document titled “Secure File Exchange Spec” — including:

Architecture summary

Full process flow

Folder & solution structure

Protobuf messages

All user stories and individual dev tasks


You can now build, track, and scale your .NET 8 microservice project with this as the foundation.

Would you like:

A GitHub-style README?

CI/CD pipeline spec (e.g., GitHub Actions or Azure DevOps)?

Initial seed code with NuGet packages wired in?


Happy to proceed in any direction you prefer.

