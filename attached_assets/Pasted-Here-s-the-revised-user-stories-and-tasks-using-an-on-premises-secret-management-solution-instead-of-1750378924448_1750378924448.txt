Here's the revised user stories and tasks using an on-premises secret management solution instead of Azure Key Vault, with all services designed to run in Bamboo's own environment:

---

### **Modified User Stories & Tasks**

#### **Epic: Secret Management (On-Premises Solution)**  
**User Story:** As a DevOps Engineer, I want to securely manage secrets using our on-premises infrastructure.  
**Subtasks:**  
1. Implement encrypted configuration storage using **Bamboo Vault** (internal secret manager)  
2. Create certificate management service for TLS mutual authentication  
3. Develop secrets rotation API with audit logging  
4. Build CLI tool for emergency secret rotation  
5. Implement client-side encryption for secrets in transit using AES-256-GCM  

---

#### **Epic: SFTP Ingestion**  
**User Story 1:** As a System, I want to securely download files from vendor SFTP servers.  
**Subtasks:**  
1. Retrieve SSH keys from **Bamboo Vault** via secure API  
2. Implement certificate-based authentication for SFTP connections  
3. Add automatic key rotation handling  
4. Use **Bamboo KMS** for encrypting files at rest  

---

#### **Epic: Common & Infrastructure**  
**User Story 1:** As a DevOps, I want secure, observable services using on-prem solutions.  
**Subtasks:**  
1. Configure RabbitMQ with **Bamboo CA-signed certificates**  
2. Set up mutual TLS for gRPC using internal certificate authority  
3. Integrate with **Bamboo LogShipper** (internal ELK alternative)  
4. Implement health checks for **Bamboo Vault** connectivity  

---

### **On-Premises Technical Implementation**

#### **Secret Management Architecture**
```mermaid
graph TD
    A[Worker Services] -->|HTTPS Mutual TLS| B[Bamboo Vault]
    B --> C[Encrypted Secret Store]
    D[Admin CLI] -->|RBAC Access| B
    E[Certificate Authority] -->|Issues Certs| B
    F[Key Management Service] -->|Encryption Keys| C
```

#### **Components Specification**
1. **Bamboo Vault**:
   - REST API with mutual TLS authentication
   - Secrets encrypted with AES-256 using HSM-backed keys
   - Audit trail for all access operations
   - Automatic secret rotation scheduler

2. **Integration Code**:
```csharp
// Common/Secrets/VaultClient.cs
public class BambooVaultClient : ISecretProvider
{
    public async Task<string> GetSecretAsync(string secretName)
    {
        using var client = new HttpClient();
        // Mutual TLS configuration
        client.DefaultRequestHeaders.Add("X-Vault-Namespace", "secure-file-exchange");
        
        var response = await client.GetAsync(
            $"https://vault.bamboo.internal/v1/secrets/data/{secretName}",
            new X509Certificate2("client-cert.pfx", GetVaultPassword())
        );
        
        // Handle response and decrypt payload
    }
    
    private string GetVaultPassword() => 
        Environment.GetEnvironmentVariable("VAULT_CLIENT_SECRET");
}
```

3. **Certificate Management**:
   - Internal CA issues certificates for:
     - Service-to-service communication
     - RabbitMQ client authentication
     - Vault API access
   - Certificate auto-rotation via cron jobs

---

### **Modified Infrastructure Diagram**
```
Secure File Exchange Platform
│
├── Bamboo Vault (Internal)
├── Certificate Authority (Internal)
├── Key Management Service (Internal)
├── LogShipper (ELK Alternative)
│
├── SftpWorkerService 
│   └── Uses Vault for SSH keys
├── FileProcessorService
│   └── Uses Vault for decryption keys
└── Other Services...
```

---

### **Security Enhancements for On-Premises**

1. **Data-at-Rest Protection**:
   - Use **Bamboo KMS** for AES-256 file encryption
   - Implement TDE (Transparent Data Encryption) for databases

2. **Network Security**:
   - Service mesh with mutual TLS
   - Hardware security modules (HSMs) for root keys
   - DMZ isolation for external-facing components

3. **Access Control**:
   - RBAC with Bamboo LDAP integration
   - JIT (Just-In-Time) privilege escalation
   - Session recording for administrative access

---

### **Modified Observability Stack**
| **Component**       | **On-Prem Solution**       | **Integration** |
|---------------------|----------------------------|----------------|
| **Logging**         | Bamboo LogShipper          | Serilog sink   |
| **Metrics**         | Prometheus + Grafana       | OpenTelemetry  |
| **Tracing**         | Jaeger                     | OTLP exporter  |
| **Alerting**        | Bamboo AlertManager        | Webhook target |

---

### **Updated Deployment Process**
1. **Secret Injection**:
   ```bash
   # Deployment script example
   bamboo-cli secrets bind sftp-worker \
     --cert sftp-client-cert \
     --key ssh-connection-key \
     --env ENCRYPTION_KEY
   ```

2. **Certificate Bootstrapping**:
   ```csharp
   // Program.cs for all workers
   builder.ConfigureServices(services => 
   {
       services.AddBambooVault(Configuration);
       services.AddMutualTlsAuthentication(
           certSource: BambooCertSource.Vault,
           certName: "service-mtls-cert"
       );
   });
   ```

3. **Health Checks**:
   ```csharp
   builder.Services.AddHealthChecks()
       .AddBambooVaultCheck()
       .AddCertificateExpiryCheck("mtls-cert", 30); // Warn 30d before expiry
   ```

---

### **Disaster Recovery Additions**
**User Story:** As an Operations Lead, I want geographically redundant secret storage.  
**Subtasks:**  
1. Implement cross-datacenter replication for Bamboo Vault  
2. Create cold storage backup of HSM seed keys  
3. Develop manual failover procedure with break-glass access  
4. Test secret recovery quarterly  

---

### **Compliance Additions**
**User Story:** As a Security Auditor, I want to verify secret access patterns.  
**Subtasks:**  
1. Implement Vault access audit logs  
2. Create anomalous access detection rules  
3. Generate quarterly access attestation reports  
4. Integrate with Bamboo Compliance Dashboard  

---

This solution maintains all original functionality while replacing cloud dependencies with Bamboo's internal systems. The architecture provides:
1. Full control over secret lifecycle
2. Compliance with internal security policies
3. Integration with existing on-prem infrastructure
4. Zero dependency on external cloud providers
5. Enhanced audit capabilities for regulatory requirements

All services are designed to run in Bamboo's private data centers with air-gapped deployment options for high-security environments.